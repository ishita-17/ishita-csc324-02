ggplot(Cars, aes(x = Mileage, y = Price, color = factor(is_SAAB), shape = factor(is_xlr))) +
geom_point(alpha - 0.5) +
scale_color_manual(values = c("orange", "purple")) +
labs(x = "Mileage", y = "Price", title = "Scatterplot for Price and Mileage", color = "SAAB", shape = "Cadillac XLR-V8")
Cars <- Cars %>%
mutate(
is_SAAB = ifelse(Make == "SAAB", 1, 0),
is_xlr = ifelse(Make == "Cadillac" & Model == "XLR-V8", 1, 0)
)
ggplot(Cars, aes(x = Mileage, y = Price, color = factor(is_SAAB), shape = factor(is_xlr))) +
geom_point(alpha = 0.5) +
scale_color_manual(values = c("orange", "purple")) +
labs(x = "Mileage", y = "Price", title = "Scatterplot for Price and Mileage", color = "SAAB", shape = "Cadillac XLR-V8")
Cars <- Cars %>%
mutate(
is_SAAB = ifelse(Make == "SAAB", 1, 0),
is_xlr = ifelse(Make == "Cadillac" & Model == "XLR-V8", 1, 0)
)
ggplot(Cars, aes(x = Mileage, y = Price, color = factor(is_SAAB), shape = factor(is_xlr))) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("orange", "purple")) +
labs(x = "Mileage", y = "Price", title = "Scatterplot for Price and Mileage", color = "SAAB", shape = "Cadillac XLR-V8")
Cars <- Cars %>%
mutate(
is_SAAB = ifelse(Make == "SAAB", 1, 0),
is_xlr = ifelse(Make == "Cadillac" & Model == "XLR-V8", 1, 0)
)
ggplot(Cars, aes(x = Mileage, y = Price, color = factor(is_SAAB), shape = factor(is_xlr))) +
geom_point(alpha = 0.8) +
scale_color_manual(values = c("orange", "purple")) +
labs(x = "Mileage", y = "Price", title = "Scatterplot for Price and Mileage", color = "SAAB", shape = "Cadillac XLR-V8")
m6 <- lm(Price ~ Mileage + Cyl + is_SAAB + is_xlr, data = Cars)
summary(m6)
mfrow(c(2,2))
par(mfrow = c(2,2))
plot(m6)
m7 <- lm(Price ~ Mileage + Cyl + is_SAAB + is_xlr + Mileage:is_SAAB + Mileage:is_xlr, data = Cars)
summary(m7)
par(mfrow = c(2,2))
plot(m7)
m7 <- lm(Price ~ Mileage + Cyl + is_SAAB + is_xlr  + Mileage:is_xlr, data = Cars)
summary(m7)
m8 <- lm(Price ~ Mileage + Cyl + is_SAAB + is_xlr  + Mileage:is_xlr, data = Cars)
summary(m8)
par(mfrow = c(2,2))
plot(m8)
m8 <- lm(Price ~ Mileage + Cyl + is_SAAB + is_xlr  + Mileage:is_xlr, data = Cars)
summary(m8)
par(mfrow = c(2,2))
plot(m8)
m9 <- lm(Price ~ Cyl + Liter + Doors + Cruise + Sound + Leather + Mileage, data = Cars)
summary(m9)
#change eval = F to eval = T in the chunk options above
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
install.packages("leaps")
#change eval = F to eval = T in the chunk options above
library(leaps)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
#change eval = F to eval = T in the chunk options above
library(leaps)
reg_obj <- reg_obj <- regsubsets(Price ~ Cyl + Liter + Doors + Cruise + Sound + Leather + Mileage, data = Cars, nvmax = 16)
summary(reg_obj)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
#change eval = F to eval = T in the chunk options above
library(leaps)
reg_obj <- reg_obj <- regsubsets(Price ~ Cyl + Liter + Doors + Cruise + Sound + Leather + Mileage, data = Cars, nvmax = 16)
reg_out <- summary(reg_obj)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
#change eval = F to eval = T in the chunk options above
library(leaps)
reg_obj <- regsubsets(Price ~ Cyl + Liter + Doors + Cruise + Sound + Leather + Mileage, data = Cars, nvmax = 16)
reg_out <- summary(reg_obj)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
View(reg_out)
View(reg_out)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic) %>%
arrange(desc(reg_out$adjr2))
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic) %>%
arrange(reg_out$cp)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic) %>%
arrange(reg_out$bic)
cbind(as.data.frame(reg_out$which), reg_out$adjr2, reg_out$cp, reg_out$bic)
install.packages("moderndive")
knitr::opts_chunk$set(echo = TRUE)
ggplot(Cars, aes(x = Mileage, y = Price, color = Cyl)) +
geom_point() +
#geom_smooth(method = "lm", se = F) +
moderndive::geom_parallel_slopes()+
labs(x = "Mileage", y = "Price", color = "No. of Cylinders") +
ggtitle("Relationship between Mileage and Price")
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
library(dplyr)
data("Pollster08")
Pollster08 <- Pollster08 %>% mutate(Charlie = as.factor(Charlie), Meltdown = as.factor(Meltdown))
library(ggplot2)
ggplot(Pollster08, aes(x = Days, y = Margin)) +
geom_point()
m1 <- lm(Margin ~ poly(Days, degree = 2, raw = T), data = Pollster08)
summary(m1)
ggplot(Pollster08, aes(x = Days, y = Margin, color = Charlie)) +
geom_point() +
geom_smooth(method = "lm", se = F)
m2 <- lm(Margin ~ Days + Charlie + Days:Charlie, data = Pollster08)
summary(m2)
ggplot(Pollster08, aes(x = Days, y = Margin, color = Meltdown)) +
geom_point() +
geom_smooth(method = "lm", se = F)
m3 <- lm(Margin ~ Days + Meltdown + Days:Meltdown, data = Pollster08)
summary(m3)
Cars <- read.csv("https://grinnell-statistics.github.io/sta-310-s24/data/Cars.csv")
library(dplyr)
Cars <- Cars %>%
mutate(Cyl = as.factor(Cyl))
ggplot(Cars, aes(x = Mileage, y = Price, color = Cyl)) +
geom_point() +
labs(x = "Mileage", y = "Price", color = "No. of Cylinders") +
ggtitle("Relationship between Mileage and Price")
ggplot(Cars, aes(x = Mileage, y = Price, color = Cyl)) +
geom_point() +
#geom_smooth(method = "lm", se = F) +
moderndive::geom_parallel_slopes()+
labs(x = "Mileage", y = "Price", color = "No. of Cylinders") +
ggtitle("Relationship between Mileage and Price")
View(df)
knitr::opts_chunk$set(echo = TRUE)
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack") +
theme_minimal() +
facet_wrap(~Income.group)
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack") +
facet_wrap(~Income.group)
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack") +
facet_wrap(~Income.group)
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack")
View(df2)
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack")
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("https://raw.githubusercontent.com/ishita-17/ishita-csc324-02/main/AI_index_db.csv")
library(ggplot2)
library(dplyr)
library(viridis)
library(hrbrthemes)
library(plotly)
library(leaflet)
library(sf)
library(fmsb)
library(knitr)
df %>%
arrange(desc(Talent)) %>%
ggplot(aes(x=Research, y = Development, size = Research, color = Country)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 25), name="Talent") +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A") +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("Research") +
xlab("Development") +
theme(legend.position = "none")
# Interactive version
p <- df %>%
mutate(Research=round(Research,2)) %>%
mutate(Talent=round(Talent,2)) %>%
mutate(Development=round(Development,2)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(Talent)) %>%
mutate(Country = factor(Country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", Country, "\nTalent: ", Talent, "\nResearch: ", Research, "\nDevelopment: ", Development, sep="")) %>%
# Classic ggplot
ggplot( aes(x=Research, y=Development, size = Talent, color = Country, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Talent") +
scale_color_viridis(discrete=TRUE, guide=FALSE, option = "C") +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
pp <- ggplotly(p, tooltip="text")
pp
# Read this shape file with the rgdal library.
world <- read_sf('/Users/ishi/csc324-labs/world_shape/ne_50m_admin_0_countries.shx')
non_matches <- anti_join(x = df, y = world, by = c("Country" = "NAME_EN"))
non_matches
df$Country[df$Country == "Czechia"] <- "Czech Republic"
df$Country[df$Country == "China"] <- "People's Republic of China"
non_matches <- anti_join(x = df, y = world, by = c("Country" = "NAME_EN"))
non_matches
df2 <- left_join(x = df, y = world, by = c("Country" = "NAME_EN"))
# Convert MULTIPOLYGON geometries
multipolygons <- lapply(df2$geometry, function(poly_list) st_multipolygon(poly_list))
# Create sf object
sf_data <- st_sf(data = df2, geometry = multipolygons)
col_vals <- df2$Total.score
col_vals[is.infinite(col_vals)] <- NA
pal <- colorNumeric("magma", domain = col_vals)
myLabels <- paste("<strong>", df2$Country, "</strong>", "<br/>",
"Total Score:", prettyNum(df2$Total.score, big.mark = ","))  # Adds commas to pop
myPopups <- paste("Political Regime: ", df2$Political.regime)
leaflet(sf_data) %>% addTiles() %>%
addPolygons(fillColor = pal(col_vals),
weight = 1,
highlight = highlightOptions(
weight = 3,
color = "grey",
fillOpacity = 0.7,
bringToFront = TRUE),
label = lapply(myLabels, htmltools::HTML),
popup = myPopups) %>%
addLegend(pal = pal, values = col_vals,
title = "Total Score", position = "bottomleft", na.label = "Missing")
ggplot(df, aes(x = Cluster, fill=Region)) +
geom_bar(position="Stack")
# Exclude columns Political.regime and Income.group
df3 <- df[, !names(df) %in% c("Political.regime", "Income.group", "Cluster", "Region")]
df_country <- subset(df3, Country == "United States of America")
values <- as.data.frame(df_country[, -1])
colnames(values) <- names(df_country)[-1]
values2 <- rbind(max(values) , min(values) , values)
radarchart(values2  , axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
vlcex=0.8)
kable(values)
# Interactive version
p <- df %>%
mutate(Research=round(Research,2)) %>%
mutate(Talent=round(Talent,2)) %>%
mutate(Development=round(Development,2)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(Talent)) %>%
mutate(Country = factor(Country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", Country, "\nTalent: ", Talent, "\nResearch: ", Research, "\nDevelopment: ", Development, sep="")) %>%
# Classic ggplot
ggplot( aes(x=Research, y=Development, size = Talent, color = Country, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Talent") +
scale_color_viridis(discrete=TRUE, guide=FALSE, option = "C") +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
pp <- ggplotly(p, tooltip="text")
pp
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
caterpillars <- read.csv("https://grinnell-statistics.github.io/sta-310-s24/data/caterpillar.csv",
colClasses=c("Instar"="factor"))
ggplot(caterpillars, aes(x = BodySize, y = Mrate)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Body Size", y = "Mrate", title = "Relationship between Body Size and Mrate")
ggplot(caterpillars, aes(x = LogBodySize, y = LogMrate)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Log Body Size", y = "Log Mrate", title = "Relationship between log Body Size and log Mrate")
options(scipen = 4)
m1 <- lm(Mrate ~ BodySize, data = caterpillars)
summary(m1)
m2 <- lm(LogMrate ~ LogBodySize, data = caterpillars)
summary(m2)
par(mfrow = c(2,2))
plot(m1)
caterpillars$Residuals <- m1$residuals
ggplot(data = caterpillars, aes(x = BodySize, y = Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
par(mfrow = c(2,2))
plot(m2)
caterpillars$Log_Residuals <- m2$residuals
ggplot(data = caterpillars, aes(x = LogBodySize, y = Log_Residuals)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
Crabs <- read.csv("https://grinnell-statistics.github.io/sta-310-s24/data/Crabs.csv")
ggplot(Crabs, aes(x = Mass, y = Oxygen, color = Noise)) +
geom_point() +
labs(x = "Mass", y = "Oxygen", color = "Noise Type",  title = "Relationship between Oxygen, Mass, and Noise Type")
m3 <- lm(Oxygen ~ Mass + Noise, data = Crabs)
summary(m3)
m4 <- lm(Oxygen ~ Mass*Noise, data = Crabs)
summary(m4)
par(mfrow = c(2,2))
plot(m3)
Crabs$Residuals <- m3$residuals
ggplot(data = Crabs, aes(x = Residuals, y = Mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
par(mfrow = c(2,2))
plot(m4)
Crabs$Residuals2 <- m4$residuals
ggplot(data = Crabs, aes(x = Residuals2, y = Mass)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
MLB <- read.csv("https://grinnell-statistics.github.io/sta-310-s24/data/MLB.csv")
ggplot(MLB, aes(x = Runs, y = League)) +
geom_point() +
labs(x = "Runs", y = "League", title = "Relationship between Runs and Each League")
m5 <- lm(Runs ~ League, data = MLB)
summary(m5)
par(mfrow = c(2,2))
plot(m5)
best_subset <- leaps::regsubsets(WinPct ~ . -Team -League, data = MLB, nvmax = 16)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best %>%
arrange(desc(best_out$cp))
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best %>%
sort(desc(best_out$cp))
library(ggplot2)
library(tidyr)
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best %>%
sort(desc(best_out$cp))
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best %>%
arrange(desc(best_out$cp))
?arrange
?sort
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best %>%
sort(best_out$cp, decreasing = TRUE)
best_out <- summary(best_subset)
summary_best <- cbind(vars = 1:16, as.data.frame(best_out$which), best_out$rsq, best_out$adjr2, best_out$cp, best_out$bic)
summary_best
View(summary_best)
library(ggplot2)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("https://raw.githubusercontent.com/ishita-17/ishita-csc324-02/main/AI_index_db.csv")
library(ggplot2)
library(dplyr)
library(viridis)
library(hrbrthemes)
library(plotly)
library(leaflet)
library(sf)
library(fmsb)
library(knitr)
df %>%
arrange(desc(Talent)) %>%
ggplot(aes(x=Research, y = Development, size = Research, color = Country)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 25), name="Talent") +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A") +
theme_ipsum() +
theme(legend.position="bottom") +
ylab("Research") +
xlab("Development") +
theme(legend.position = "none")
# Interactive version
p <- df %>%
mutate(Research=round(Research,2)) %>%
mutate(Talent=round(Talent,2)) %>%
mutate(Development=round(Development,2)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(Talent)) %>%
mutate(Country = factor(Country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", Country, "\nTalent: ", Talent, "\nResearch: ", Research, "\nDevelopment: ", Development, sep="")) %>%
# Classic ggplot
ggplot( aes(x=Research, y=Development, size = Talent, color = Country, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Talent") +
scale_color_viridis(discrete=TRUE, guide=FALSE, option = "C") +
theme_ipsum() +
theme(legend.position="none")
# turn ggplot interactive with plotly
pp <- ggplotly(p, tooltip="text")
pp
# Read this shape file with the rgdal library.
world <- read_sf('/Users/ishi/ishita-csc324-02/world_shape/ne_50m_admin_0_countries.shx')
non_matches <- anti_join(x = df, y = world, by = c("Country" = "NAME_EN"))
non_matches
shiny::runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('sta230_r/RShinyApp.R')
runApp('sta230_r/RShinyApp.R')
runApp('ishita-csc324-02')
install.packages("shinythemes")
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('sta230_r/RShinyApp.R')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
runApp('ishita-csc324-02')
grted()
getwd()
getwd()
setwd("/Users/ishi/ishita-csc324-02")
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?theme
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radarchart
runApp()
runApp()
runApp()
?caxislabels
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?theme
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
df <- read.csv("https://raw.githubusercontent.com/ishita-17/ishita-csc324-02/main/time_log.csv")
time_log <- read.csv("https://raw.githubusercontent.com/ishita-17/ishita-csc324-02/main/time_log.csv")
View(time_log)
ggplot(time_log, aes(x = Week, fill = Activity)) +
geom_bar(stat="identity")
ggplot(time_log, aes(x = Time, y = Week, fill = Activity)) +
geom_bar(stat="identity")
ggplot(time_log, aes(x = Week, y = Time, fill = Activity)) +
geom_bar(stat="identity")
ggplot(time_log, aes(x = Week, y = Time, fill = Activity)) +
geom_bar(stat="identity") +
labs(x = "Week", y = "Time Taken (in minutes)", fill = "Activity",
title = "Time Log Chart for Shiny App")
